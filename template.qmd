---
title: "CEVE 101: Project 03"
author: "Seth Hallbert sah25" # CHANGE THIS
date: "2024-12-24"

# do not change anything below this line
engine: julia
code-annotations: hover
format:
    html: default
    docx: default
---

We begin by loading the required packages.

```{julia}
using Revise                      # <1>
using RainwaterHarvesting         # <2>
```

1. `Revise` allows us to update code without restarting Julia.
2. We load the `RainwaterHarvesting` package that contains our simulation tools.

### Setting the file path

Next, we specify the path to the rainfall data file and read it in.

```{julia}
filepath = "data/40.txt" # <1>   
rainfall_data = RainfallData(filepath) # <2>
```

1. This is the path to the rainfall data file for the station of interest.
2. This creates a `RainfallData` object containing the rainfall data for the specified station.

If we dig under the hood a bit, we can see that there are two main pieces of information:

- `station_info`: a dictionary containing information about the station, such as its name and location.
- `annual_data`: a dictionary mapping years to `AnnualRainfallData` objects, each containing the date and precipitation data for a given year.

### Plotting the Data

We can plot the data for one or all of the years to verify that it looks correct.

```{julia}
plot(rainfall_data) # <1>
```

1. This `plot` function is defined in [viz.jl](./RainwaterHarvesting/src/viz.jl) and is a thin wrapper around the Plots.jl package.

### Discussion

*1979-1980-1981-1982-1988-1990...2009-2011...2023

These are the years used in this data set. The years 1983, 1984,1985,1986,1987,1988, 1989, and 2010 are not utilized. Therefore the time this graph uses is a total of 30 years. However, this is not sufficient as it is stated that a signifigant statistical anaylyses requires at least 100 by the NIH. In Ceara, the major droughts that have occured have been 1877 to 1879, 1973, 1983, 1992, 1998 and a drought that was from 2012 to 2017. Our model only has the major droughts of 2012 to 2017, 1998, and 1992. Without this data our understanding of the rainfall data is limited as tools such as predictive models will not be as accurate. *

## Understanding the Theoretical Model

Let's explore the model that simulates the rainwater harvesting system.

### Mass Balance Equation

The mass balance model for the rainwater tank is given by:

*For this mass balance equation, some assumptions include conservation of mass, no leakage or loss, and that its acting as an independent system. To ease these assumptions, I would ass a Loss (L_t) variable: V_(t+1)=V_t+Q_t-C_t-L_t. Adding a loss constant for processes such as evaporation makes this model more applicable to real life settings. *

### Inflow ($Q_t$)

Inflow is calculated as

*Considering events such as spilling and evaporation, we assume that the run off coefficient is constant. However precipiattion is not at a fixed rate and factors such as temperature may cause precipiation to rise or fall which would influence the runn off constant. By introducing a functional form of the run off coefficnet as a function of precipiation and temperature we can account for this. (Runoff Coeff)t=f(P,T)
Linear Dependency Model: (Runoff Coeff)t=(Runoff Coeff)0+k1*Pt+k2*Tt
So, (Runoff Coeff)t=((Runoff Coeff)0+k1*Pt+k2*Tt)*A*max(Pt-F,0)
k1, k2, and (Runoff Coeff)0 can be found through real world data through technqiues regarding optimization or regression. *

### Consumption

Consumption is modeled as:

$$
C_t = \begin{cases}
    74.1 & \quad \text{day of year} > 150 \\
    0 & \quad \text{day of year} \leq 150
\end{cases}
$$

*This makes two major assumptions.
First, the household begins using water from the tank after the 150th day of the year.
This is based on the idea that the rainy season lasts for about the first 150 days of the year, and so they may have other sources of water before then.
The second assumption is that each household consumes 74.1 liters per day during the dry season. Despite this, water consumption will still vary among regions and households. 
To modify this model we can adjust the average use of water parameter to be dependent on the amount of people in each household. By adding variable c (average per capita water usage) and Nh (Number of people in the household) we derive the model: Ct=c*Nh.  *

## Model Implementation and Testing

### Defining the Model Parameters

We can define the model parameters with sensible default values.
You will have the opportunity to change these values later.

```{julia}
#| output: false
param = ModelParameters(          # <1>
    runoff_coefficient=0.85,      # <2>
    roof_area_m2=100.0,            # <3>
    first_flush_mm=2.0,           # <4>
    tank_capacity_L=19000.0       # <5>
)
```

1. This creates a `ModelParameters` object with the specified parameters.
2. The runoff coefficient ($\eta$) is a measure of how much of the rain that falls on the roof ends up in the tank.
3. The roof area ($A$) is the area of the roof that the rain falls on.
4. The first flush volume ($V_f$) is the volume of rain that is discarded because it is dirty.
5. The tank capacity ($V_\text{max}$) is the maximum volume of the tank.

### Running the Simulation for One Year

Let's run the model for the year 1981.

```{julia}
rainfall_1981 = rainfall_data.annual_data[1981]    # <1>
results_1981 = run_timesteps(rainfall_1981, param) # <2>
p1 = plot(results_1981)                                 # <3>
```

1. We select the annual rainfall data for the year 1981.
2. We run the simulation for the year 1981.
3. We plot the results, again using a `plot` function defined in [viz.jl](./RainwaterHarvesting/src/viz.jl).

To compare rainfall and tank volume:

```{julia}
p2 = plot(rainfall_1981)
plot(p2, p1, layout=(2, 1), size=(1000, 700), link=:x)
```

Observe how the tank's water level responds to rainfall events.
Note any periods when the tank runs dry or overflows.

### Reliability Analysis

We can run simulations for all years, one at a time, and then check how many times the tank runs dry.
You can run simulations for all years at once with the following code:

```{julia}
all_years = sort(collect(keys(rainfall_data.annual_data)))          # <1>
all_results = [run_timesteps(rainfall_data.annual_data[year], param) for year in all_years]   # <2>
any_failures = [!isempty(result.failure_dates) for result in all_results]  # <3>
println("Number of years with failures: ", sum(any_failures), " out of ", length(all_years))  # <4>
```

1. We get all the years in order.
2. We run the simulation for each year.
3. We check if any failures occurred.
4. We print the number of years with failures and the total number of years.

